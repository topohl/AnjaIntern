fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
# normalization
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate date and time into extra columns
overallData[c('Date', 'Time')] <- str_split_fixed(overallData$DateTime, ' ', 2)
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
#################### test ###########################################################
library(dplyr)
find_id <- function(x_Pos, y_Pos, lookup_tibble) {
result <- lookup_tibble %>%
filter(x == x_Pos, y == y_Pos) %>%
select(ID)
if (nrow(result) > 0) {
return(result$ID)
} else {
return(NA) # Return NA if no match found
}
}
#Positions
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = select(unique_positions, c(xPos)), yPos = select(unique_positions, c(yPos)))
# Assuming tibble1 contains ID, x, and y columns and tibble2 contains x and y columns
overallData_ids <- overallData %>%
mutate(PositionID = mapply(find_id, overallData$xPos, overallData$yPos, Positions_tibble))
View(Positions_tibble)
print(names(Positions_tibble))
print(Positions_tibble$xPos)
sorted <- Positions_tibble%>%
filter(xPos==0)
print(sorted)
sorted <- Positions_tibble%>%
filter(xPos==0, yPos==116)
print(sorted)
find_id <- function(x_Pos, y_Pos, lookup_tibble) {
result <- lookup_tibble %>%
filter(xPos == x_Pos, yPos == y_Pos) %>%
select(ID)
if (nrow(result) > 0) {
return(result$ID)
} else {
return(NA) # Return NA if no match found
}
}
#Positions
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = select(unique_positions, c(xPos)), yPos = select(unique_positions, c(yPos)))
# Assuming tibble1 contains ID, x, and y columns and tibble2 contains x and y columns
overallData_ids <- overallData %>%
mutate(PositionID = mapply(find_id, overallData$xPos, overallData$yPos, Positions_tibble))
overallData$xPos
# Assuming tibble1 contains ID, x, and y columns and tibble2 contains x and y columns
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = mapply(find_id, overallData$xPos, overallData$yPos, Positions_tibble))
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(overallData$xPos, overallData$yPos, Positions_tibble))
find_id(overallData$xPos, overallData$yPos, Positions_tibble)
library(dplyr)
find_id <- function(x_Pos, y_Pos, lookup_tibble) {
result <- lookup_tibble %>%
filter(xPos == x_Pos, yPos == y_Pos) %>%
select(PositionID)
if (nrow(result) > 0) {
return(result$PositionID)
} else {
return(NA) # Return NA if no match found
}
}
find_id(overallData$xPos, overallData$yPos, Positions_tibble)
find_id(0, 116, Positions_tibble)
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
View(overallData_ids)
overallData_ids <- overallData[c('Date', 'Time', 'AnimalID', 'System', 'PositionID')]
overallData_final <- overallData_ids[c('Date', 'Time', 'AnimalID', 'System', 'PositionID')]
View(overallData_final)
data_systemOne <- overallData_final%>%
filter(System=="sys.1")
View(data_systemOne)
data_systemTwo <- overallData_final%>%
filter(System=="sys.2")
data_systemThree <- overallData_final%>%
filter(System=="sys.3")
data_systemFour <- overallData_final%>%
filter(System=="sys.4")
data_systemFive <- overallData_final%>%
filter(System=="sys.5")
fullTime <- seq(from = as.POSIXct("24-04-23 00:00:00", format = "%H:%M:%S"), to = as.POSIXct("28-04-23 23:59:59", format = "%H:%M:%S"), by = "1 sec")
## create empty time tibble that contains rows for every second in 5 days
# Erzeuge eine Sequenz von Zeitstempeln
start_time <- as.POSIXct("2023-04-24 00:00:00", tz = "UTC")
end_time <- as.POSIXct("2023-04-28 23:59:59", tz = "UTC")
time_sequence <- seq(start_time, end_time, by = "1 sec")
# Konvertiere die Zeitstempel in ein Tibble
fullTime <- tibble(timestamp = time_sequence)
View(fullTime)
View(fullTime)
start_time <- as.POSIXct("2023-04-24 00:00:00", tz = "UTC")
end_time <- as.POSIXct("2023-04-28 23:59:59", tz = "UTC")
time_sequence <- seq(start_time, end_time, by = "1 sec")
# Konvertiere die Zeitstempel in ein Tibble
fullTime <- tibble(DataTime = time_sequence)
fullTimeTibble <- fullTimeTibble%>%
mutate(new_column = NA)
View(sorted)
sorted <- sorted%>%
mutate(new_column = NA)
sorted <- sorted%>%
mutate(Test = NA)
fullTime <- tibble(DateTime = time_sequence)
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time
# paths
fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
# organization of overallData:
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate date and time into extra columns
#overallData[c('Date', 'Time')] <- str_split_fixed(overallData$DateTime, ' ', 2)
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
#################### convert xPos and yPos into one column named "PositionID" ###########################################################
# finds corresponding PositionID from to coordinates(x_Pos, y_pos) in lookup_tibble and returns ID
find_id <- function(x_Pos, y_Pos, lookup_tibble) {
result <- lookup_tibble %>%
filter(xPos == x_Pos, yPos == y_Pos) %>%
select(PositionID)
if (nrow(result) > 0) {
return(result$PositionID)
} else {
return(NA) # Return NA if no match found
}
}
#Positions_tibble contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = unique_positions[1], yPos = unique_positions[2])
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##############################################################################
# sort columns
overallData_final <- overallData_ids[c('Date', 'Time', 'AnimalID', 'System', 'PositionID')]
View(overallData)
# sort columns
overallData_final <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
########################################################################################################
## divide overallData_final into his 5 different systems (5 different mouse cages)
# maybe just safe the ids from each cage in a vector?
data_systemOne <- overallData_final%>%
filter(System=="sys.1")
data_systemTwo <- overallData_final%>%
filter(System=="sys.2")
data_systemThree <- overallData_final%>%
filter(System=="sys.3")
data_systemFour <- overallData_final%>%
filter(System=="sys.4")
data_systemFive <- overallData_final%>%
filter(System=="sys.5")
## create empty time tibble that contains rows for every second in 5 days
# Erzeuge eine Sequenz von Zeitstempeln
start_time <- as.POSIXct("2023-04-24 00:00:00", tz = "UTC")
end_time <- as.POSIXct("2023-04-28 23:59:59", tz = "UTC")
time_sequence <- seq(start_time, end_time, by = "1 sec")
# Konvertiere die Zeitstempel in ein Tibble
fullTime <- tibble(DateTime = time_sequence)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(!!sym(PositionID))
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne)
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
View(data_systemOne)
new_mouse_position <- data_systemOne%>%
filter(DateTime=="2023-04-24 12:24:52")%>%
select(!!sym(PositionID))
new_mouse_position <- data_systemOne%>%
filter(DateTime=="2023-04-24 12:24:52")
View(new_mouse_position)
new_mouse_position <- data_systemOne%>%
filter(DateTime=="2023-04-24 12:24:52", AnimalID=="OR428")
View(new_mouse_position)
new_mouse_position <- new_mouse_position%>%
select(!!sym(PositionID))
new_mouse_position <- new_mouse_position%>%
select(PositionID)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == ~mouse)
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == !!sym(mouse))
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!sym(mouse) = NA)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate((!!sym(mouse)) = NA)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(sym(mouse) = NA)
mouse
mouse <- "86876"
mouse
sym(mouse)
!!sym(mouse)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(sym(mouse) = NA)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(mouse = NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(~mouse = NA)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(fullTimeTibble)
for(changeTime in all_changes$DateTime){                   ##!!!undo the DateTime split in origin mouseTibble!!!
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
select(PositionID)
#   search the recorded time from changeTime in fullTimeTibble
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[current_row, mouse])) {
my_tibble[current_row, mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
test_tibble <- enter_mouseData_into_fullTime(data_systemOne,fullTime)
