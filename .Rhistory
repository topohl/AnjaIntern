all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
#convert r timestamp into actual date string
changeTime<- changeTime%>%
as.POSIXct(origin = "1970-01-01")%>%
format("%Y-%m-%d %H:%M:%S")
cat("\n", "changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
DateTime <- as.POSIXct(DateTime, origin = "1970-01-01")%>%
DateTime <- format(DateTime,"%Y-%m-%d %H:%M:%S")%>%
filter(DateTime=="2023-04-24 12:24:52")
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
print(1682332025==1682332051)
print(distinct(data_systemOne$DateTime))
print(distinct(as.vector(data_systemOne$DateTime)))
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
#convert r timestamp into actual date string
changeTime<- changeTime%>%
as.POSIXct(origin = "1970-01-01")%>%
format("%Y-%m-%d %H:%M:%S")
cat("\n", "changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==as.POSIXct("2023-04-24 12:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
current_row <- fullTime%>%
filter(DateTime==as.POSIXct("2023-04-24 12:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
current_row <- fullTime%>%
filter(DateTime==as.POSIXct("2023-04-24 10:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
current_row <- fullTime%>%
filter(DateTime==as.POSIXct("2023-04-24 02:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
current_row <- fullTime%>%
filter(DateTime==as.POSIXct("2023-04-24 01:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
current_row <- fullTime%>%
filter(DateTime==as.POSIXct("2023-04-24 14:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
# Erzeuge eine Sequenz von Zeitstempeln
start_time <- as.POSIXct("2023-04-24 00:00:00", tz = "")
end_time <- as.POSIXct("2023-04-28 23:59:59", tz = "")
time_sequence <- seq(start_time, end_time, by = "1 sec")
# Konvertiere die Zeitstempel in ein Tibble
fullTime <- tibble(DateTime = time_sequence)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
#convert r timestamp into actual date string
changeTime<- changeTime%>%
as.POSIXct(origin = "1970-01-01")%>%
format("%Y-%m-%d %H:%M:%S")
cat("\n", "changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==as.POSIXct("2023-04-24 12:24:52"))
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
}
}
}
#test function
enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
stop("Error: The current cell already has a value.")
}
cat("\n", "current row: ", "\n")
print(current_row)
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
testest <- as_tibble(
a=c(1,2,NA),
b=c(7,8,9)
)
testest <- tibble(
a=c(1,2,NA),
b=c(7,8,9)
)
View(testest)
testest[3,"a"] <- 3
testest
testest <- tibble(
a=c(1,2,NA),
b=c(7,8,9)
)
testest
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
print(fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position)
stop("Error: The current cell already has a value.")
}
current_row_after <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row_after)
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
############################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
print(fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position)
stop("Error: The current cell already has a value.")
}
cat("test position after entering value", "\n")
print(fullTimeTibble[rownames(current_row), mouse])
}
cat("END OF ROUND", "\n")
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
###########################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
print(fullTimeTibble)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
print(fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position)
stop("Error: The current cell already has a value.")
}
cat("test position after entering value", "\n")
print(fullTimeTibble[rownames(current_row), mouse])
cat("END OF ROUND", "\n")
cat("\n")
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
cat("fullTimeTibble", "\n")
print(fullTimeTibble)
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
print(fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position)
stop("Error: The current cell already has a value.")
}
cat("test position after entering value", "\n")
print(fullTimeTibble[rownames(current_row), mouse])
cat("END OF ROUND", "\n")
cat("\n")
}
}
}
##test
new_mouse_position <- data_systemOne%>%
filter(DateTime=="2023-04-24 12:24:52", AnimalID=="OR428")
new_mouse_position <- new_mouse_position%>%
select(PositionID)
mouse <- "86876"
!!sym(mouse)
########################################################################
# for every mouse from system one enter information
enter_mouseData_into_fullTime <- function(mouseTibble, fullTimeTibble){
#vector of each mouse in mouseTibble
unique_mice <- unique(mouseTibble$AnimalID)
print(unique_mice)
#for every time row from one mouse in mouseTibble
for(mouse in unique_mice){
print(mouse)
#   create new column for AnimalID
fullTimeTibble <- fullTimeTibble%>%
mutate(!!mouse := NA)
# filter the mouse tibble only for the changes of current mouse
all_changes <- mouseTibble%>%
filter(AnimalID == mouse)
print(all_changes)
for(changeTime in as.vector(all_changes$DateTime)){                   ##!!!undo the DateTime split in origin mouseTibble!!!
cat("changeTime: ", changeTime, "\n")
cat("fullTimeTibble", "\n")
print(fullTimeTibble)
# save the new position at the moment of changeTime in extra variable
new_mouse_position <- mouseTibble%>%
filter(DateTime==changeTime)%>%
filter(AnimalID == mouse)%>%
select(PositionID)%>%
as.numeric()
cat("\n", "new_mouse_position: ", "\n")
print(new_mouse_position)
#   search the recorded time from changeTime in fullTimeTibble
cat("changeTime: ", changeTime, "\n")
current_row <- fullTimeTibble%>%
filter(DateTime==changeTime)
cat("\n", "current row: ", "\n")
print(current_row)
#enter new_mouse_position into current_row X mouse(row X column) from mouse in fullTimeTibble
if (is.na(fullTimeTibble[rownames(current_row), mouse])) {
fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position
} else {
print(fullTimeTibble[rownames(current_row), mouse] <- new_mouse_position)
stop("Error: The current cell already has a value.")
}
cat("test position after entering value", "\n")
print(fullTimeTibble[rownames(current_row), mouse])
cat("END OF ROUND", "\n")
cat("\n")
}
}
}
enter_mouseData_into_fullTime(data_systemOne,fullTime)
