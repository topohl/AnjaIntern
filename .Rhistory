geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
print(m1$PositionID)
alterated_pos <- map(list(m1$PositionID), ~ .+0.125)
print(alterated_pos)
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PositionID
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
print(m1$PositionID)
print(typeof(m1$PositionID))
alterated_pos <- map(list(m1$PositionID), ~ .+0.125)
print(alterated_pos)
print(typeof(alterated_pos))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PositionID
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
#print(m1$PositionID)
#print(typeof(m1$PositionID))
#alterated_pos <- map(list(m1$PositionID), ~ .+0.125)
m1 <- map(m1$PositionID, ~ .+0.125)
print(m1)
print(typeof(m1))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PositionID
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
#print(m1$PositionID)
#print(typeof(m1$PositionID))
alterated_pos <- as_tibble(map(m1$PositionID, ~ .+0.125))
#m1 <- map(m1$PositionID, ~ .+0.125)
print(alterated_pos)
print(typeof(alterated_pos))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PositionID
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
#print(m1$PositionID)
#print(typeof(m1$PositionID))
#alterated_pos <- map(m1$PositionID, ~ .+0.125)
m1 <- m1%>%
mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
#print(alterated_pos)
#print(typeof(alterated_pos))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PositionID
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
#print(m1$PositionID)
#print(typeof(m1$PositionID))
#alterated_pos <- map(m1$PositionID, ~ .+0.125)
m1 <- m1%>%
mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
print(m1$PrettyPos)
#print(alterated_pos)
#print(typeof(alterated_pos))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 3, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
plot_micePositions_together <- function(m1){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
#map
#print(m1$PositionID)
#print(typeof(m1$PositionID))
#alterated_pos <- map(m1$PositionID, ~ .+0.125)
m1 <- m1%>%
mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
print(m1$PrettyPos)
#print(alterated_pos)
#print(typeof(alterated_pos))
# m1 = DateTime, PositionID from mouse one
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 1, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "blue") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
plot_micePositions_together(md1)
View(unique_positions)
plot_micePositions_together <- function(m1, m2){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
m1 <- m1%>%mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
m1 <- m2%>%mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.325))
#define data
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
data2 <- data.frame(
time = m2$DateTime,
position = m2$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 1, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "blue") +
geom_point(data = data2, aes(x = time, y = y_value), size = 3, color = "red") +
geom_segment(data = data2 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "red") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
md1 <- overallData_final%>%
filter(AnimalID=="OR428")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md1 <- select(md1,c(DateTime, PositionID))
md2 <- overallData_final%>%
filter(AnimalID=="OR414")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md2 <- select(md2,c(DateTime, PositionID))
plot_micePositions_together(md1, md2)
plot_micePositions_together <- function(m1, m2){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
m1 <- m1%>%mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
m2 <- m2%>%mutate(PrettyPos = map_dbl(m2$PositionID, ~ .+0.325))#(m1$PositionID, ~ .+0.325))
#define data
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
data2 <- data.frame(
time = m2$DateTime,
position = m2$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 1, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "blue") +
geom_point(data = data2, aes(x = time, y = y_value), size = 3, color = "red") +
geom_segment(data = data2 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "red") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
md1 <- overallData_final%>%
filter(AnimalID=="OR428")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md1 <- select(md1,c(DateTime, PositionID))
md2 <- overallData_final%>%
filter(AnimalID=="OR414")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md2 <- select(md2,c(DateTime, PositionID))
plot_micePositions_together(md1, md2)
plot_micePositions_together <- function(m1, m2){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
m1 <- m1%>%mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
m2 <- m2%>%mutate(PrettyPos = map_dbl(m2$PositionID, ~ .+0.325))#(m1$PositionID, ~ .+0.325))
#define data
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
data2 <- data.frame(
time = m2$DateTime,
position = m2$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 1, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "blue") +
geom_point(data = data2, aes(x = time, y = position), size = 3, color = "red") +
geom_segment(data = data2 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "red") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
md1 <- overallData_final%>%
filter(AnimalID=="OR428")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md1 <- select(md1,c(DateTime, PositionID))
md2 <- overallData_final%>%
filter(AnimalID=="OR414")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md2 <- select(md2,c(DateTime, PositionID))
plot_micePositions_together(md1, md2)
plot_micePositions_together <- function(m1, m2){#startTime,, m2, m3, m4 ...
#alterate y-points to 0,125
m1 <- m1%>%mutate(PrettyPos = map_dbl(m1$PositionID, ~ .+0.125))#(m1$PositionID, ~ .+0.125))
m2 <- m2%>%mutate(PrettyPos = map_dbl(m2$PositionID, ~ .+0.325))#(m1$PositionID, ~ .+0.325))
#define data
data1 <- data.frame(
time = m1$DateTime,
position = m1$PrettyPos
)
data2 <- data.frame(
time = m2$DateTime,
position = m2$PrettyPos
)
ggplot() +
geom_point(data = data1, aes(x = time, y = position), size = 1, color = "blue") +
geom_segment(data = data1 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "blue") +
geom_point(data = data2, aes(x = time, y = position), size = 1, color = "red") +
geom_segment(data = data2 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = position, yend = position),
arrow = arrow(length = unit(0.1, "cm")), size = 0.5, color = "red") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
}
md1 <- overallData_final%>%
filter(AnimalID=="OR428")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md1 <- select(md1,c(DateTime, PositionID))
md2 <- overallData_final%>%
filter(AnimalID=="OR414")%>%
filter(grepl("2023-04-24", DateTime))%>%
filter(PositionID<=8)%>%
filter(hour(DateTime) == 19)
md2 <- select(md2,c(DateTime, PositionID))
plot_micePositions_together(md1, md2)
ggplot() +
geom_point(data = data, aes(x = time, y = y_value), size = 3, color = "blue") +
geom_segment(data = data %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = y_value, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "blue") +
geom_point(data = data2, aes(x = time, y = y_value), size = 3, color = "red") +
geom_segment(data = data2 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = y_value, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "red") +
geom_point(data = data3, aes(x = time, y = y_value), size = 3, color = "yellow") +
geom_segment(data = data3 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = y_value, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "yellow") +
geom_point(data = data4, aes(x = time, y = y_value), size = 3, color = "green") +
geom_segment(data = data4 %>% mutate(next_time = lead(time, default = last(time))),
aes(x = time, xend = next_time, y = y_value, yend = y_value),
arrow = arrow(length = unit(0.2, "cm")), size = 1, color = "green") +
geom_hline(yintercept = 1:8, color = "black", linetype = "solid", size = 0.5) +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +  # X-Achsenbeschriftung
scale_y_continuous(breaks = seq(1.0,9.0, by=0.5), labels = custom_labels) +  # Y-Achsenbeschriftung
labs(x = "Zeitspanne (24h)", y = "Felder (1-8)",
title = "Vier Reihen von Punkten mit waagerechten Linien",
color = "Datenreihe") +
theme_minimal()
# ALGORITHM:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION2 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time, time operations in general
library(tibble)       #important for tibble operations
library(purrr)
# paths
fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
#fuctions
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
####################################################################################################################################
######ORGANIZATION OF overallData:######
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
###### convert xPos and yPos into one column named "PositionID" ######
#create Positions_tibble that contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = unique_positions[1], yPos = unique_positions[2])
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##### sort columns #####
overallData_final <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
# column as tibble
overallData_final <- as_tibble(overallData_final)
################################################################################################################################
# ALGORITHM:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
#####################################################################################
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_systemOne, overallData_final, mice_list)
#####################################################################################
#initialize mice closeness result
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
#update closeness list
count_closeness_list <- check_closeness(mice_list, count_closeness_list)
#################################################################################
##assign start time(choose one of the mices start time)
start_time <- mice_list[[1]][[2]]
time <- start_time
###try a loop
#first last second:
#last_time <- "2023-04-28 11:00:14"
last_time <- "2023-04-25 11:00:14"
for(i in 1:3600){
time <- sec_shift(time)
mice_list <- update_mice_list(mouse_names_systemOne, mice_list, overallData_final, time)
count_closeness_list <- check_closeness(mice_list, count_closeness_list)
}
