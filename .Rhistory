m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
#update closeness list for the first time
#count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
#################################################################################
##assign start time(choose one of the mices start time)
start_time <- mice_list[[1]][[2]]
time <- start_time
###try a loop
#first last second:
#last_time <- "2023-04-28 11:00:14"
last_time <- "2023-04-25 11:00:14"
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
for(i in 1:126986){
time <- sec_shift(time)
mice_list <- update_mice_list1(mouse_names_systemOne, mice_list, mice_systemOne, time)
count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
}
print(count_closeness_list)
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION3 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time, time operations in general
library(tibble)       #important for tibble operations
library(purrr)
library(ggplot2)      #for plots
# paths
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
fileSourcePath <-  paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos.csv")
#fuctions
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
# read csv file in tibble
overallData <- as_tibble(read_delim(fileSourcePath,delim = ";", show_col_types = FALSE))
####################################################################################################################################
###### PREPROCESSING OF overallData: ######
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
###### convert xPos and yPos into one column named "PositionID" ######
#create Positions_tibble that contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:8), xPos = c(0,100,200,300,0,100,200,300), yPos = c(0,0,0,0,116,116,116,116))
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##### sort columns #####
overallData <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
##### sort by Date Time #####
overallData <- overallData%>%
arrange(., DateTime)
################################################################################################################################
#choose system
overallData_sys1 <- overallData%>%
filter(System=="sys.1")%>%
as_tibble()
#save as csv file
library(writexl)
write_csv(overallData_sys1, "overallData_sys1.csv")
################################################################################################################################
as.numeric(overallData_sys1[2925,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
as.numeric(overallData_sys1[2935,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
as.numeric(overallData_sys1[2930,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
#############################################################################################################
# ALGORITHM:
##INITIALIZATIONS##
mouse_names_system1 <- unique(overallData_sys1$AnimalID)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
#update closeness list for the first time
#count_closeness_list <- check_closeness(mice_list, count_closeness_list)
##assign start time(choose one of the mices start time)
timeTemp <- "1682331892"
#assign first line number
lineTemp <- 5
#assign firt seconds difference
secTemp <- 0
# stop the running time
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
#for(i in 1:6000){
#while(lineTemp!=(6584)){#5 days(aka whole tibble, all lines in tibble)
theEnd <- (2925+1)
while(lineTemp!=theEnd && lineTemp<theEnd){
#create a copy of the old version of the mice list for check_closeness-function
old_mice_list <- mice_list
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#secTemp aus mice list
secTemp <-  mice_list[["tempData"]][["secTemp"]]
count_closeness_list <- check_closeness(old_mice_list,mice_list,count_closeness_list, secTemp)
#line <- line+1 not necessarry!!
#aber:
lineTemp <- mice_list[["tempData"]][["lineTemp"]]
#and new time temp
timeTemp <- mice_list[[1]][[2]]
#if(lineTemp>2908){break}
}
print(count_closeness_list)
#print the running time
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
# ALGORITHM:
##INITIALIZATIONS##
mouse_names_system1 <- unique(overallData_sys1$AnimalID)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
#update closeness list for the first time
#count_closeness_list <- check_closeness(mice_list, count_closeness_list)
##assign start time(choose one of the mices start time)
timeTemp <- "1682331892"
#assign first line number
lineTemp <- 5
#assign firt seconds difference
secTemp <- 0
# stop the running time
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
#for(i in 1:6000){
#while(lineTemp!=(6584)){#5 days(aka whole tibble, all lines in tibble)
theEnd <- (2930+1)
while(lineTemp!=theEnd && lineTemp<theEnd){
#create a copy of the old version of the mice list for check_closeness-function
old_mice_list <- mice_list
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#secTemp aus mice list
secTemp <-  mice_list[["tempData"]][["secTemp"]]
count_closeness_list <- check_closeness(old_mice_list,mice_list,count_closeness_list, secTemp)
#line <- line+1 not necessarry!!
#aber:
lineTemp <- mice_list[["tempData"]][["lineTemp"]]
#and new time temp
timeTemp <- mice_list[[1]][[2]]
#if(lineTemp>2908){break}
}
print(count_closeness_list)
#print the running time
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
# ALGORITHM:
##INITIALIZATIONS##
mouse_names_system1 <- unique(overallData_sys1$AnimalID)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
#update closeness list for the first time
#count_closeness_list <- check_closeness(mice_list, count_closeness_list)
##assign start time(choose one of the mices start time)
timeTemp <- "1682331892"
#assign first line number
lineTemp <- 5
#assign firt seconds difference
secTemp <- 0
# stop the running time
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
#for(i in 1:6000){
#while(lineTemp!=(6584)){#5 days(aka whole tibble, all lines in tibble)
theEnd <- (2935+1)
while(lineTemp!=theEnd && lineTemp<theEnd){
#create a copy of the old version of the mice list for check_closeness-function
old_mice_list <- mice_list
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#secTemp aus mice list
secTemp <-  mice_list[["tempData"]][["secTemp"]]
count_closeness_list <- check_closeness(old_mice_list,mice_list,count_closeness_list, secTemp)
#line <- line+1 not necessarry!!
#aber:
lineTemp <- mice_list[["tempData"]][["lineTemp"]]
#and new time temp
timeTemp <- mice_list[[1]][[2]]
#if(lineTemp>2908){break}
}
print(count_closeness_list)
#print the running time
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION2 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time, time operations in general
library(tibble)       #important for tibble operations
library(purrr)
library(ggplot2)      #for plots
# paths
fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
#fuctions
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
####################################################################################################################################
######ORGANIZATION OF overallData:######
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
###### convert xPos and yPos into one column named "PositionID" ######
#create Positions_tibble that contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = unique_positions[1], yPos = unique_positions[2])
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##### sort columns #####
overallData_final <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
# column as tibble
overallData_final <- as_tibble(overallData_final)
#############
# ALGORITHM:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
#for (sub_list in names(mice_list)) {
#  print(sub_list)
#  for (element in mice_list[[sub_list]]) {
#    print(element)
#  }
#}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
#####################################################################################
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_systemOne, overallData_final, mice_list)
#####################################################################################
#initialize mice closeness result
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
#update closeness list for the first time
#count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
#################################################################################
##assign start time(choose one of the mices start time)
start_time <- mice_list[[1]][[2]]
time <- start_time
###try a loop
#first last second:
#last_time <- "2023-04-28 11:00:14"
last_time <- "2023-04-25 11:00:14"
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
for(i in 1:126665){
time <- sec_shift(time)
mice_list <- update_mice_list1(mouse_names_systemOne, mice_list, mice_systemOne, time)
count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
}
print(count_closeness_list)
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
# ALGORITHM:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
#for (sub_list in names(mice_list)) {
#  print(sub_list)
#  for (element in mice_list[[sub_list]]) {
#    print(element)
#  }
#}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
#####################################################################################
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_systemOne, overallData_final, mice_list)
#####################################################################################
#initialize mice closeness result
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
#update closeness list for the first time
#count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
#################################################################################
##assign start time(choose one of the mices start time)
start_time <- mice_list[[1]][[2]]
time <- start_time
###try a loop
#first last second:
#last_time <- "2023-04-28 11:00:14"
last_time <- "2023-04-25 11:00:14"
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
for(i in 1:126675){
time <- sec_shift(time)
mice_list <- update_mice_list1(mouse_names_systemOne, mice_list, mice_systemOne, time)
count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
}
print(count_closeness_list)
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
# ALGORITHM:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
#for (sub_list in names(mice_list)) {
#  print(sub_list)
#  for (element in mice_list[[sub_list]]) {
#    print(element)
#  }
#}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
#####################################################################################
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_systemOne, overallData_final, mice_list)
#####################################################################################
#initialize mice closeness result
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
#update closeness list for the first time
#count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
#################################################################################
##assign start time(choose one of the mices start time)
start_time <- mice_list[[1]][[2]]
time <- start_time
###try a loop
#first last second:
#last_time <- "2023-04-28 11:00:14"
last_time <- "2023-04-25 11:00:14"
startTime <- Sys.time()
######### repeat over and over
#for(i in 1:432000){    #5days
for(i in 1:126708){
time <- sec_shift(time)
mice_list <- update_mice_list1(mouse_names_systemOne, mice_list, mice_systemOne, time)
count_closeness_list <- check_closeness1(mice_list, count_closeness_list)
}
print(count_closeness_list)
endTime <- Sys.time()
timeTaken <- endTime-startTime
cat("time taken: ", timeTaken, "\n")
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION3 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time, time operations in general
library(tibble)       #important for tibble operations
library(purrr)
library(ggplot2)      #for plots
# paths
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
fileSourcePath <-  paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos.csv")
#fuctions
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
# read csv file in tibble
overallData <- as_tibble(read_delim(fileSourcePath,delim = ";", show_col_types = FALSE))
####################################################################################################################################
###### PREPROCESSING OF overallData: ######
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
###### convert xPos and yPos into one column named "PositionID" ######
#create Positions_tibble that contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:8), xPos = c(0,100,200,300,0,100,200,300), yPos = c(0,0,0,0,116,116,116,116))
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##### sort columns #####
overallData <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
##### sort by Date Time #####
overallData <- overallData%>%
arrange(., DateTime)
################################################################################################################################
#choose system
overallData_sys1 <- overallData%>%
filter(System=="sys.1")%>%
as_tibble()
#save as csv file
library(writexl)
write_csv(overallData_sys1, "overallData_sys1.csv")
################################################################################################################################
# ALGORITHM:
as.numeric(overallData_sys1[2936,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
as.numeric(overallData_sys1[2937,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
as.numeric(overallData_sys1[2938,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
as.numeric(overallData_sys1[2939,"DateTime"])-as.numeric(overallData_sys1[1,"DateTime"])
View(overallData_sys1)
