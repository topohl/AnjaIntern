mice_list[[i]][[3]] <- first_position
#print(first_position)
}
return(mice_list)
}
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData, mice_list)
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
mouse_names_system1 <- as_tibble(unique(overallData_sys1$AnimalID))
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
# find the FIRST TIME where mouse is tracked in the cage
# aka first value of mouse in overallData_final
find_first_pos_and_time <- function(system_mouse_names, overallData_final, mice_list){
for (i in 1:length(system_mouse_names)){ #i=1-4
#rename
mouse_name <- system_mouse_names[[i]]
print(mouse_name)
#search first entry in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_name)%>%
slice(1) #first row
print(first_entry)
#write name, position and time into mice_list
mice_list[i][[1]] <- mouse_name
#print(mouse_name)
first_time <- first_entry$DateTime
mice_list[[i]][[2]] <- first_time
#print(first_time)
first_position <- first_entry$PositionID
mice_list[[i]][[3]] <- first_position
#print(first_position)
}
return(mice_list)
}
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
#choose system
overallData_sys1 <- overallData%>%
filter(System=="sys.1")%>%
as_tibble()
##INITIALIZATIONS##
mouse_names_system1 <- unique(overallData_sys1$AnimalID)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
mice_list
overallData_sys1[3,]
View(overallData_sys1)
overallData_sys1[3,"DateTime"]
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
next_second <- sec_shift(time)
new_time <- data[line,"DateTime"]
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
#update closeness list for the first time
count_closeness_list <- check_closeness(mice_list, count_closeness_list)
##assign start time(choose one of the mices start time)
timeTemp <- mice_list[[1]][[2]]
#assign first line number
lineTemp <- 1
#assign first line number
lineTemp <- 5
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
new_time <- data[line,"DateTime"]
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
print("blub")
new_time <- data[line,"DateTime"]
print("blob")
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
print("blub")
new_time <- data[line,"DateTime"]
print("blob")
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
print("blib")
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
print("blub")
new_time <- data[line,"DateTime"]
print("blob")
print(new_time)
print(next_second)
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
print("blib")
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
print("blub")
new_time <- data[line,"DateTime"]
print("blob")
print(new_time)
print(next_second)
if(new_time==as.POSIXct(as.numeric(next_second), origin = "1970-01-01")){
print("yay")
}else{
print("noo")
}
print("blib")
return(mice_list)
}
################
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
as.numeric("2023-04-29 12:24:52 CEST")
as.numeric("2023-04-29 12:24:52")
as.numeric(timeTemp)
timeTemp
data[line,"DateTime"]
overallData_sys1[3,"DateTime"]
as.numeric(overallData_sys1[3,"DateTime"])
as.numeric(overallData_sys1[5,"DateTime"])
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
print("start")
next_second <- sec_shift(time)
print("blub")
new_time <- as.numeric(data[line,"DateTime"])
print("blob")
print(new_time)
print(next_second)
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
print("blib")
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
as.numeric("2023-04-24 12:24:52")
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
print(new_time-time)
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
timeTemp
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
print(time)
print(new_time)
print(new_time-time)
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
print(time)
print(new_time)
print(new_time-as.numeric(time))
if(new_time==next_second){
print("yay")
}else{
print("noo")
}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
mice_list[[tempData]][[secTemp]]
mice_list[[tempData]][[2]]
View(mice_list)
mice_list[[5]][[2]]
2
mice_list[["tempData"]][["secTemp"]]
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=3, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
mice_list[["tempData"]][["secTemp"]]
overallData_sys1[5,AnimalID]
overallData_sys1[5,"AnimalID"]
as.numeric(overallData_sys1[5,"AnimalID"])
as.character(overallData_sys1[5,"AnimalID"])
new_time <- as.numeric(overallData_sys1[1,"DateTime"])
line <- 1
while(as.numeric(overallData_sys1[line,"DateTime"])==new_time){
# write new position into special mouse
print("hi")
line <- line+1
}
line <- 5
new_time <- as.numeric(overallData_sys1[line,"DateTime"])
while(as.numeric(overallData_sys1[line,"DateTime"])==new_time){
# write new position into special mouse
print("hi")
line <- line+1
}
line <- 11
new_time <- as.numeric(overallData_sys1[line,"DateTime"])
while(as.numeric(overallData_sys1[line,"DateTime"])==new_time){
# write new position into special mouse
print("hi")
line <- line+1
}
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
#next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
# write sec difference between new and old time into secTemp
mice_list[["tempData"]][["secTemp"]] <- new_time-as.numeric(time)
# write new time into every mouse information
for(i in 1:4){mice_list[[i]][["time"]] <- new_time}
# while line(and especially the next lines) is still same time
while(as.numeric(data[line,"DateTime"])==new_time){
# write new position into special mouse
for(i in 1:4){
if(mice_list[[i]][["name"]]==as.character(data[line,AnimalID])){mice_list[[i]][["position"]] <- as.numeric(data[line,PositionID])}
}
line <- line+1
}
# write new line into mice_list
mice_list[["tempData"]][["lineTemp"]] <- line
#if(new_time==next_second){
#  print("yay")
#}else{
#  print("noo")
#}
return(mice_list)
}
View(mice_list)
mice_list
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
View(mice_list)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
# aka first value of mouse in overallData_final
find_first_pos_and_time <- function(system_mouse_names, data, mice_list){
for (i in 1:length(system_mouse_names)){ #i=1-4
#rename
mouse_name <- system_mouse_names[[i]]
#search first entry in whole data
first_entry <- data%>%
filter(AnimalID == mouse_name)%>%
slice(1) #first row
#write name, position and time into mice_list
mice_list[i][[1]] <- mouse_name
#print(mouse_name)
first_time <- first_entry$DateTime
mice_list[[i]][[2]] <- first_time
#print(first_time)
first_position <- first_entry$PositionID
mice_list[[i]][[3]] <- first_position
#print(first_position)
}
return(mice_list)
}
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
#next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
# write sec difference between new and old time into secTemp
mice_list[["tempData"]][["secTemp"]] <- new_time-as.numeric(time)
# write new time into every mouse information
for(i in 1:4){mice_list[[i]][["time"]] <- new_time}
# while line(and especially the next lines) is still same time
while(as.numeric(data[line,"DateTime"])==new_time){
# write new position into special mouse
for(i in 1:4){
#if(mice_list[[i]][["name"]]==as.character(data[line,AnimalID])){mice_list[[i]][["position"]] <- as.numeric(data[line,PositionID])}
}
line <- line+1
}
# write new line into mice_list
mice_list[["tempData"]][["lineTemp"]] <- line
#if(new_time==next_second){
#  print("yay")
#}else{
#  print("noo")
#}
return(mice_list)
}
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
#second version for new algorithm
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
#next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
# write sec difference between new and old time into secTemp
mice_list[["tempData"]][["secTemp"]] <- new_time-as.numeric(time)
# write new time into every mouse information
for(i in 1:4){mice_list[[i]][[2]] <- new_time}
# while line(and especially the next lines) is still same time
while(as.numeric(data[line,"DateTime"])==new_time){
# write new position into special mouse
for(i in 1:4){
if(mice_list[[i]][[1]]==as.character(data[line,AnimalID])){mice_list[[i]][[3]] <- as.numeric(data[line,PositionID])}
}
line <- line+1
}
# write new line into mice_list
mice_list[["tempData"]][["lineTemp"]] <- line
#if(new_time==next_second){
#  print("yay")
#}else{
#  print("noo")
#}
return(mice_list)
}
##INITIALIZATIONS##
mouse_names_system1 <- unique(overallData_sys1$AnimalID)
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
tempData    <- list(secTemp=0, lineTemp=0)
# combine them to a list of lists
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour,
"tempData" = tempData)
#initialize mice closeness result
#m1 on the third int means number of seconds together from m1 and m3
count_closeness_list <- list(   m1=c(0,0,0,0),
m2=c(0,0,0,0),
m3=c(0,0,0,0),
m4=c(0,0,0,0))
##CALCULATIONS##
#update mice_list to first time and first position
mice_list <- find_first_pos_and_time(mouse_names_system1, overallData_sys1, mice_list)
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
#next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
# write sec difference between new and old time into secTemp
mice_list[["tempData"]][["secTemp"]] <- new_time-as.numeric(time)
# write new time into every mouse information
for(i in 1:4){mice_list[[i]][[2]] <- new_time}
# while line(and especially the next lines) is still same time
while(as.numeric(data[line,"DateTime"])==new_time){
# write new position into special mouse
for(i in 1:4){
#if(mice_list[[i]][[1]]==as.character(data[line,AnimalID])){mice_list[[i]][[3]] <- as.numeric(data[line,PositionID])}
}
line <- line+1
}
# write new line into mice_list
mice_list[["tempData"]][["lineTemp"]] <- line
#if(new_time==next_second){
#  print("yay")
#}else{
#  print("noo")
#}
return(mice_list)
}
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
as.character(overallData_sys1[5,AnimalID])
as.character(overallData_sys1[5,"AnimalID"])
# more complex
update_mice_list <- function(system_mouse_names, mice_list, data, time, line){
#next_second <- sec_shift(time)
new_time <- as.numeric(data[line,"DateTime"])
print(new_time)
print(new_time-as.numeric(time))
# write sec difference between new and old time into secTemp
mice_list[["tempData"]][["secTemp"]] <- new_time-as.numeric(time)
# write new time into every mouse information
for(i in 1:4){mice_list[[i]][[2]] <- new_time}
# while line(and especially the next lines) is still same time
while(as.numeric(data[line,"DateTime"])==new_time){
# write new position into special mouse
for(i in 1:4){
if(mice_list[[i]][[1]]==as.character(data[line,"AnimalID"])){mice_list[[i]][[3]] <- as.numeric(data[line,"PositionID"])}
}
line <- line+1
}
# write new line into mice_list
mice_list[["tempData"]][["lineTemp"]] <- line
#if(new_time==next_second){
#  print("yay")
#}else{
#  print("noo")
#}
return(mice_list)
}
#tests
mice_list <- update_mice_list(mouse_names_system1, mice_list, overallData_sys1, timeTemp, lineTemp)
