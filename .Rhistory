install.packages("writexl")
#save as excel file
library(writexl)
write_xlsx(fullTime_test, "fullTime_test.xlsx")
write_csv(fullTime_test, "fullTime_test.csv")
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION2 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time
# paths
fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
# organization of overallData:
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
#################### convert xPos and yPos into one column named "PositionID" ###########################################################
# finds corresponding PositionID from to coordinates(x_Pos, y_pos) in lookup_tibble and returns ID
find_id <- function(x_Pos, y_Pos, lookup_tibble) {
result <- lookup_tibble %>%
filter(xPos == x_Pos, yPos == y_Pos) %>%
select(PositionID)
if (nrow(result) > 0) {
return(result$PositionID)
} else {
return(NA) # Return NA if no match found
}
}
#Positions_tibble contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = unique_positions[1], yPos = unique_positions[2])
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##############################################################################
# sort columns
overallData_final <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
View(overallData_final)
mice_vector <- c("mouseOne", "mouseTwo", "mouseThree", "mouseFour")
for (mouse in mice_vector){
mouse <- list(name="", time="")
}
View(mouse)
for (i in mice_vector){
mice_vector[i] <- list(name="", time="")
}
mouseOne    <- list(name="", time="")
mouseTwo    <- list(name="", time="")
mouseThree  <- list(name="", time="")
mouseFour   <- list(name="", time="")
mice_vector <- c(mouseOne, mouseTwo, mouseThree, mouseFour)
View(mice_vector)
for (i in mice_vector){
print(mice_vector[i])
}
for (i in mice_vector){
print(mice_vector[[i]])
}
sizeof(mice_vector)
length(mice_vector)
mice_list <- list(mouseOne, mouseTwo, mouseThree, mouseFour)
View(mice_list)
for (i in mice_list){
print(mice_list[i])
}
View(i)
length(mice_list)
for (i in length(mice_list)){
print(mice_list[[i]])
}
length(mice_list)
for (i in length(mice_list)){
print(mice_list)
}
for (sub_list in mice_list) {
for (element in sub_list) {
print(element)
}
}
for (sub_list in mice_list) {
print(sub_list)
for (element in sub_list) {
print(element)
}
}
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in sub_list) {
print(element)
}
}
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in sub_list) {
print(element)
}
}
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in sub_list) {
print(element)
}
}
names(mice_list)
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
names(mice_list)
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in sub_list) {
print(element)
}
}
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
mouse_names <- unique(overallData_final$AnimalID)
View(overallData_final)
mouse_names_systemOne <- overallData_final%>%
filter(System="sys.1")%>%
unique(overallData_final$AnimalID)
mouse_names_systemOne <- overallData_final%>%
filter(System=="sys.1")%>%
unique(overallData_final$AnimalID)
ouse_names_systemOne <- overallData_final%>%
filter(System == "sys.1")%>%
unique(AnimalID)
mouse_names_systemOne <- overallData_final%>%
filter(System == "sys.1")%>%
unique(AnimalID)
mouse_names_systemOne <- overallData_final%>%
filter(System == "sys.1")
View(mouse_names_systemOne)
mouse_names_systemOne <- overallData_final%>%
filter(System == "sys.1")#%>%
unique(overallData_final$AnimalID)
View(mouse_names_systemOne)
mouse_names_systemOne
mouse_names_systemOne <- overallData_final%>%
filter(System == "sys.1")%>%
unique(overallData_final$AnimalID)
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(overallData_final$AnimalID)
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
View(mice_systemOne)
mouse_names_systemOne[[1]]
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
#erste Zeile
slice(1)
View(first_entry)
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
slice(1)
View(first_entry)
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
slice(1)
first_entry <- first_entry%>%
slice(1)
first_entry
first_entry <- first_entry%>%
slice_head()
first_entry <- first_entry%>%slice_head()
first_entry <- first_entry%>%slice_head()
first_entry <- overallData_final%>%slice_head()
View(first_entry)
first_entry <- overallData_final%>%slice_head(overallData_final)
first_entry <- overallData_final%>%slice_head(1)
first_entry <- overallData_final%>%slice_head(n=1)
View(first_entry)
test <- overallData_final%>%slice_head(n=1)
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
filter(row_number()==1)
View(first_entry)
first_entry <- overallData_final%>%
filter(row_number()==1)
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
filter(row_number()==1)
test <- c(x=1,2,3, y=3,2,1)
test <- as_tibble(x=1,2,3, y=3,2,1)
test <- tibble(x=1,2,3, y=3,2,1)
library(tibble)
test <- tibble(x=c(1,2,3),
y=c(3,2,1))
test_slice <- test%>%slice_head(n=1)
View(test_slice)
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
filter(row_number()==1)
typeof(overallData_final)
overallData_final <- as_tibble(overallData_final)
typeof(overallData_final)
source("S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos-version2.R")
first_entry <- overallData_final%>%
filter(AnimalID == "OR428")%>%
filter(row_number()==1)
View(first_entry)
first_entry_zwei <- overallData_final%>%
filter(AnimalID == "OR428")%>%
filter(row_number()==1)
View(first_entry_zwei)
for (i in mouse_names_systemOne){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[1]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionId
#give time and position in list
print(first_time)
print(first_position)
}
for (i in mouse_names_systemOne){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[1]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
print(first_position)
}
for (i in mouse_names_systemOne){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[i]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
print(first_position)
}
for (i in length(mouse_names_systemOne)){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[i]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
print(first_position)
}
length(mouse_names_systemOne)
for (i in 4)){
for (i in 4){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[i]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
print(first_position)
}
for (i in 1:length(mouse_names_systemOne)){
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[i]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
print(first_position)
}
View(mice_systemOne)
View(mice_list)
for (i in 1:length(mouse_names_systemOne)){ #von i=1-4
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_names_systemOne[[i]])%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(first_time)
mice_list[mouse_names_systemOne[[i]]][[1]] <- first_time
print(first_position)
mice_list[mouse_names_systemOne[[i]]][[2]] <- first_position
}
View(mice_list)
View(mice_list)
View(mice_list)
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
View(mice_list)
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
#print(verschachtelte_liste[["tier1"]][[2]])
print(mice_list[mouse_names_systemOne[[i]]][[1]])
mouse_names_systemOne[[1]]
mice_list[i][[2]]
mice_list[[i]][[2]]
for (i in 1:length(mouse_names_systemOne)){ #von i=1-4
mouse_name <- mouse_names_systemOne[[i]]
#search in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_name)%>%
slice(1) #erste Zeile/ filter(row_number()==1)
first_time <- first_entry$DateTime
first_position <- first_entry$PositionID
#give time and position in list
print(mouse_names_systemOne[[i]])
mice_list[i][[1]] <- mouse_name#name
print(first_position)
mice_list[[i]][[2]] <- first_time
print(first_time)
#position zuweisen!!
}
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
# save names of the first system
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
mouse_names_systemOne[[1]]
for (i in 1:length(mouse_names_systemOne)){ #von i=1-4
#rename
mouse_name <- mouse_names_systemOne[[i]]
#search first entry in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_name)%>%
slice(1) #first row
#write name, position and time into mice_list
mice_list[i][[1]] <- mouse_name
print(mouse_name)
first_time <- first_entry$DateTime
mice_list[[i]][[2]] <- first_time
print(first_time)
first_position <- first_entry$PositionID
mice_list[[i]][[3]] <- first_position
print(first_position)
}
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
#fuctions
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
## 11/2023
## Anja Magister
## ANALYSIS OF ANIMAL POSITIONS - VERSION2 ##
##
# libraries
library(readr)        # load readr package for reading csv files
library(stringr)
library(dplyr)
library(lubridate)    # for rounding time
library(tibble)       #important for tibble operations
# paths
fileSourcePath <-  "S:/Lab_Member/Anja/Git/AnjaIntern/E9_SIS_B3_CC1_AnimalPos.csv"
#fuctions
working_directory <- "S:/Lab_Member/Anja/Git/AnjaIntern"
source(paste0(working_directory,"/E9_SIS_B3_CC1_AnimalPos-functions.R"))
# read csv file in tibble
overallData <- read_delim(fileSourcePath,delim = ";", show_col_types = FALSE)
####################################################################################################################################
# organization of overallData:
# delete unnecessary columns
overallData <- select(overallData, -c(RFID, AM, zPos))
# convert the DateTime column to a datetime format(also rounds the DateTime)
overallData$DateTime <- as.POSIXct(overallData$DateTime, format = "%d.%m.%Y %H:%M:%S")
# separate Animal into his ID an his system
overallData[c('AnimalID', 'System')] <- str_split_fixed(overallData$Animal, '_', 2)
#################### convert xPos and yPos into one column named "PositionID" ###########################################################
#create Positions_tibble that contains every possible combination of our coordinates together with an ID
positions <- select(overallData, c(xPos,yPos))
unique_positions <- unique(positions)
Positions_tibble <- tibble(PositionID = c(1:length(unique_positions$xPos)), xPos = unique_positions[1], yPos = unique_positions[2])
# Adding column PositionID to overallData instead of two colums with x and y coordinates
overallData_ids <- overallData %>% rowwise() %>%
mutate(PositionID = find_id(xPos, yPos, Positions_tibble))
##############################################################################
# sort columns
overallData_final <- overallData_ids[c('DateTime', 'AnimalID', 'System', 'PositionID')]
# column as tibble
overallData_final <- as_tibble(overallData_final)
########################################################################################################
# algorithm:
# initialize mice lists with empty name, start time and start position of every mouse in one system(4mice together)
mouseOne    <- list(name="", time="", position=0)
mouseTwo    <- list(name="", time="", position=0)
mouseThree  <- list(name="", time="", position=0)
mouseFour   <- list(name="", time="", position=0)
#put the four lists in one list together
mice_list <- list(
"mouseOne" = mouseOne,
"mouseTwo" = mouseTwo,
"mouseThree" = mouseThree,
"mouseFour" = mouseFour)
#print the list of mice
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
# save unique names of the first system:
mice_systemOne <- overallData_final%>%
filter(System == "sys.1")
mouse_names_systemOne <- unique(mice_systemOne$AnimalID)
#####################################################################################
# find the FIRST TIME where mouse is tracked in the cage
# aka first value of mouse in overallData_final
for (i in 1:length(mouse_names_systemOne)){ #i=1-4
#rename
mouse_name <- mouse_names_systemOne[[i]]
#search first entry in whole data
first_entry <- overallData_final%>%
filter(AnimalID == mouse_name)%>%
slice(1) #first row
#write name, position and time into mice_list
mice_list[i][[1]] <- mouse_name
print(mouse_name)
first_time <- first_entry$DateTime
mice_list[[i]][[2]] <- first_time
print(first_time)
first_position <- first_entry$PositionID
mice_list[[i]][[3]] <- first_position
print(first_position)
}
mice_names <- names(mice_list)
mice <- names(mice_list)
combination <- combn(mice, 2)
View(combination)
combination <- as_tibble(combn(mice, 2))
View(combination)
for (i in 1:4) {
for (j in (i+1):4) {
print(c(i, j))
}
}
for (i in 1:4) {
for (j in (i+1):4) {
print(c(i, j))
print(mice_list[[i]][[3]])
print(mice_list[[j]][[3]])
}
}
mice_list[[2]][[3]]
for (i in 1:3) {
for (j in (i+1):4) {
print(c(i, j))
print(mice_list[[i]][[3]])
print(mice_list[[j]][[3]])
}
}
for (i in 1:3) {
for (j in (i+1):4) {
print(c(i, j))
#print(mice_list[[i]][[3]])
#print(mice_list[[j]][[3]])
print(mice_list[[i]][[3]]==mice_list[[j]][[3]])
}
}
View(overallData_final)
for (sub_list in names(mice_list)) {
print(sub_list)
for (element in mice_list[[sub_list]]) {
print(element)
}
}
